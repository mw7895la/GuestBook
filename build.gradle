buildscript {

    dependencies {

        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")

    }

}

plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'war'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10' // 138 Page
}
apply plugin: 'com.ewerk.gradle.plugins.querydsl'

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation group: 'org.mariadb.jdbc',name: 'mariadb-java-client'
    implementation group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-java8time'

    implementation 'com.querydsl:querydsl-jpa'  // 139 Page
    implementation 'com.querydsl:querydsl-apt'

    /*annotationProcessor(
            'javax.persistence:javax.persistence-api',
            'javax.annotation:javax.annotation-api',
            'com.querydsl:querydsl-apt:${queryDslVersion}:jpa')*/

    //implementation group: 'org.modelmapper', name:'modelmapper', version:'2.4.4'
    //implementation group: 'net.coobird',name: 'thumbnailator', version:'0.4.14'
}


tasks.named('test') {
    useJUnitPlatform()
}

def querydslDir = "src/main/generated/queryDsl"

querydsl {

    library = "com.querydsl:querydsl-apt"

    jpa = true

    querydslSourcesDir = querydslDir

}

sourceSets {

    main.java.srcDirs = ['src/main/java', querydslDir]

}

compileQuerydsl {

    options.annotationProcessorPath = configurations.querydsl

}

configurations {

    querydsl.extendsFrom compileClasspath

}

